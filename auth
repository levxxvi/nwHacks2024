# pip3 install spotipy Flask Flask-Session
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from flask import Flask ,redirect,request, render_template
import os
from datetime import datetime, timedelta
import sys

app = Flask(__name__)
app.secret_key = 'sdaefascsasv'
app.config['CLIENT_ID'] = '9f8720c821a34ee7b1b881bea3257a50'
app.config['CLIENT_SECRET'] = 'da562de7e4394d559b22fa455bd7e005'
app.config['REDIRECT_URI'] = 'http://localhost:5000/callback'
app.config['AUTH_URL'] = 'https://accounts.spotify.com/authorize'
app.config['TOKEN_URL'] = 'https://accounts.spotify.com/api/token'
app.config['API_BASE_URL'] = 'https://api.spotify.com/v1'

auth_manager = spotipy.oauth2.SpotifyOAuth(app.config['CLIENT_ID'],
                                               app.config['CLIENT_SECRET'],
                                               app.config['REDIRECT_URI'],
                                               scope='user-read-currently-playing playlist-modify-private user-read-recently-played',
                                               show_dialog=True)

@app.route('/')
def index():
    return render_template('home.html')

@app.route('/login')
def login():
    app.config['AUTH_URL'] = auth_manager.get_authorize_url()

    return redirect(app.config['AUTH_URL'])

@app.route('/callback')
def callback():
    if request.args.get("code"):
        code = auth_manager.parse_response_code(request.args.get("code"))
        token_info = auth_manager.get_access_token(code)

        token = token_info['access_token']

        sp = spotipy.Spotify(auth=token)

        #token_info = auth_manager.get_access_token(request.args.get("code"), as_dict=False)

        #potify = spotipy.Spotify(auth=token_info,auth_manager=auth_manager)
        


        current_datetime = datetime.now()

        start_of_yesterday = datetime(current_datetime.year, current_datetime.month, current_datetime.day) - timedelta(days=1)
        end_of_yesterday = datetime(current_datetime.year, current_datetime.month, current_datetime.day) - timedelta(seconds=1)
        start_of_yesterday_timestamp = int(start_of_yesterday.timestamp())
        end_of_yesterday_timestamp = int(end_of_yesterday.timestamp())

        #app.logger.debug(token_info)
        print(end_of_yesterday_timestamp)
        track = sp.current_user_playing_track()
        recently_played = sp.current_user_recently_played(before=1705823999,limit=50)
        #app.logger.debug(recently_played)
        
        
        if recently_played['items']:
            # Count the occurrences of each track ID
            track_count = {}
            for track in recently_played['items']:
                track_id = track['track']['id']
                track_count[track_id] = track_count.get(track_id, 0) + 1

            # Find the most played track
            most_played_track_id = max(track_count, key=track_count.get)
            
            # Get information about the most played track
            most_played_track = sp.track(most_played_track_id)
            track_name = most_played_track['name']
            artists = [artist['name'] for artist in most_played_track['artists']]
            
            print(f"Most played track in the past day: {track_name} by {', '.join(artists)}")

        return render_template('calendar.html')
    
    return redirect('/')

@app.route('/update', methods = ['POST', 'GET'])
def update():
    arr = ["Happy", "Neutral", "Sad", "Angry", "Tired", "Stressed"]
    mood = request.args.get('data')
    while(mood not in arr):
        mood = request.args.get('data')
    now = datetime.now()
    cursor = mysql.connection.cursor()
    cursor.execute("UPDATE moodtracker SET Mood = %s limit 1", mood)
    mysql.connection.commit()
    cursor.close()
    return redirect('/calendar')
    
@app.route('/recentlyplayed')
def recentlyplayed():
    recently_played = auth_manager.current_user_recently_played(limit=500)


if __name__ == "__main__":
    app.run() 